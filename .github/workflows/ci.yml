name: SIAME 2026v3 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'

jobs:
  # ================================
  # ANÁLISIS DE SEGURIDAD
  # ================================
  security-scan:
    runs-on: ubuntu-latest
    name: Análisis de Seguridad

    steps:
    - uses: actions/checkout@v4

    - name: Escaneo de Secretos
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

    - name: Análisis de Dependencias
      uses: github/dependency-review-action@v3
      if: github.event_name == 'pull_request'

  # ================================
  # TESTS BACKEND
  # ================================
  backend-tests:
    runs-on: ubuntu-latest
    name: Tests Backend (Python)

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: siame_test_password
          POSTGRES_USER: siame_test_user
          POSTGRES_DB: siame_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Instalar dependencias
      run: |
        cd src/backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Ejecutar tests
      env:
        DATABASE_URL: postgresql://siame_test_user:siame_test_password@localhost:5432/siame_test
        REDIS_URL: redis://localhost:6379
        TESTING: true
      run: |
        cd src/backend
        pytest tests/ -v --cov=. --cov-report=xml

    - name: Subir cobertura a Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./src/backend/coverage.xml
        flags: backend
        name: backend-coverage

  # ================================
  # TESTS FRONTEND
  # ================================
  frontend-tests:
    runs-on: ubuntu-latest
    name: Tests Frontend (Next.js)

    steps:
    - uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json

    - name: Instalar dependencias
      run: |
        cd src/frontend
        npm ci

    - name: Linting
      run: |
        cd src/frontend
        npm run lint

    - name: Type checking
      run: |
        cd src/frontend
        npm run type-check

    - name: Tests unitarios
      run: |
        cd src/frontend
        npm run test:ci

    - name: Build de producción
      run: |
        cd src/frontend
        npm run build

  # ================================
  # TESTS E2E
  # ================================
  e2e-tests:
    runs-on: ubuntu-latest
    name: Tests End-to-End
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: siame_test_password
          POSTGRES_USER: siame_test_user
          POSTGRES_DB: siame_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Instalar dependencias Frontend
      run: |
        cd src/frontend
        npm ci

    - name: Instalar dependencias Backend
      run: |
        cd src/backend
        pip install -r requirements.txt

    - name: Configurar base de datos de prueba
      env:
        DATABASE_URL: postgresql://siame_test_user:siame_test_password@localhost:5432/siame_test
      run: |
        cd src/frontend
        npx prisma migrate deploy
        npx prisma db seed

    - name: Instalar Playwright
      run: |
        cd src/frontend
        npx playwright install --with-deps

    - name: Ejecutar backend en background
      env:
        DATABASE_URL: postgresql://siame_test_user:siame_test_password@localhost:5432/siame_test
        REDIS_URL: redis://localhost:6379
        TESTING: true
      run: |
        cd src/backend
        python -m uvicorn orchestrator.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Ejecutar frontend en background
      env:
        DATABASE_URL: postgresql://siame_test_user:siame_test_password@localhost:5432/siame_test
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test-secret
      run: |
        cd src/frontend
        npm run build
        npm start &
        sleep 10

    - name: Ejecutar tests E2E
      run: |
        cd src/frontend
        npm run test:e2e

    - name: Subir reportes de Playwright
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: src/frontend/playwright-report/
        retention-days: 30

  # ================================
  # ANÁLISIS DE CÓDIGO
  # ================================
  code-quality:
    runs-on: ubuntu-latest
    name: Análisis de Calidad de Código

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ================================
  # BUILD Y DESPLIEGUE
  # ================================
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build y Despliegue
    needs: [security-scan, backend-tests, frontend-tests, e2e-tests, code-quality]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login a Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

    - name: Build y push Orchestrator
      uses: docker/build-push-action@v5
      with:
        context: ./src/backend
        file: ./src/backend/Dockerfile.orchestrator
        push: true
        tags: |
          ${{ secrets.AZURE_CONTAINER_REGISTRY }}/siame/orchestrator:latest
          ${{ secrets.AZURE_CONTAINER_REGISTRY }}/siame/orchestrator:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build y push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./src/frontend
        file: ./src/frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.AZURE_CONTAINER_REGISTRY }}/siame/frontend:latest
          ${{ secrets.AZURE_CONTAINER_REGISTRY }}/siame/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Desplegar a Kubernetes
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          infrastructure/k8s/orchestrator-deployment.yaml
          infrastructure/k8s/frontend-deployment.yaml
          infrastructure/k8s/ingress.yaml
        images: |
          ${{ secrets.AZURE_CONTAINER_REGISTRY }}/siame/orchestrator:${{ github.sha }}
          ${{ secrets.AZURE_CONTAINER_REGISTRY }}/siame/frontend:${{ github.sha }}
        kubeconfig: ${{ secrets.KUBE_CONFIG }}

    - name: Verificar despliegue
      run: |
        kubectl rollout status deployment/siame-orchestrator
        kubectl rollout status deployment/siame-frontend
        kubectl get services